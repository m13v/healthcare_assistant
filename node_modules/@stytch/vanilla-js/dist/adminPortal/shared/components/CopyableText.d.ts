import { FC } from 'react';
import { InjectedComponents } from './componentInjection';
import { Classes } from '../utils/composeStyles';
export declare const makeCopyableTextStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"code" | "copyableText" | "copyIcon" | "hasCopiedIcon" | "noWrap", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"code" | "copyableText" | "copyIcon" | "hasCopiedIcon" | "noWrap", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"code" | "copyableText" | "copyIcon" | "hasCopiedIcon" | "noWrap"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"code" | "copyableText" | "copyIcon" | "hasCopiedIcon" | "noWrap">;
export type CopyableTextCoreProps = {
    children?: string;
    textToCopy?: string;
    noWrap?: boolean;
    id?: string;
    label?: string;
};
export declare const CopyableTextCore: ({ children, textToCopy, noWrap, id, label, classes, CodeComponent: Code, LabelComponent: Label, TypographyComponent: Typography, useClickToCopy, }: CopyableTextCoreProps & Classes<typeof makeCopyableTextStyles> & InjectedComponents<'Code' | 'Label' | 'Typography' | 'useClickToCopy'>) => JSX.Element;
export interface CopyableTruncatedIdCoreProps {
    children: string;
}
export declare const CopyableTruncatedIdCore: FC<CopyableTruncatedIdCoreProps & InjectedComponents<'CopyableText'>>;
